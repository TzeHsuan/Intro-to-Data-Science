) +
theme_minimal()
# Convert ggplot2 plot to plotly
plotly_plot <- ggplotly(ggplot_plot)
library(ggplot2)
ggplot(alldata, aes(x = Nitrate, y = Phosphate, z = Iron, size = Population)) +
geom_point() +
labs(
title = "4D Scatter Plot of Algae Growth",
x = "Nitrate",
y = "Phosphate",
z = "Iron",
size = "Population"
) +
theme_minimal()
library(plotly)
# Convert ggplot2 plot to plotly
plotly_plot <- ggplotly(ggplot_plot)
library(ggplot2)
ggplot(alldata, aes(x = Nitrate, y = Phosphate, z = Iron, size = Population)) +
geom_point() +
labs(
title = "4D Scatter Plot of Algae Growth",
x = "Nitrate",
y = "Phosphate",
z = "Iron",
size = "Population"
) +
theme_minimal()
library(plotly)
# Convert ggplot2 plot to plotly
plotly_plot <- ggplotly(ggplot_plot)
library(ggplot2)
library(plotly)
ggplot(alldata, aes(x = Nitrate, y = Phosphate, z = Iron, size = Population)) +
geom_point() +
labs(
title = "4D Scatter Plot of Algae Growth",
x = "Nitrate",
y = "Phosphate",
z = "Iron",
size = "Population"
) +
theme_minimal()
# Convert ggplot2 plot to plotly
plotly_plot <- ggplotly(ggplot_plot)
library(ggplot2)
ggplot(alldata, aes(x = Nitrate, y = Phosphate, z = Iron, size = Population)) +
geom_point() +
labs(
title = "4D Scatter Plot of Algae Growth",
x = "Nitrate",
y = "Phosphate",
z = "Iron",
size = "Population"
) +
theme_minimal()
install.packages(plotly)
library(plotly)
# Convert ggplot2 plot to plotly
plotly_plot <- ggplotly(ggplot_plot)
# Load the required libraries
library(ggplot2)
library(plotly)
# Create your ggplot2 plot
ggplot_plot <- ggplot(alldata, aes(x = Nitrate, y = Phosphate, z = Iron, size = Population)) +
geom_point() +
labs(
title = "4D Scatter Plot of Algae Growth",
x = "Nitrate",
y = "Phosphate",
z = "Iron",
size = "Population"
) +
theme_minimal()
# Convert ggplot2 plot to plotly
plotly_plot <- ggplotly(ggplot_plot)
# View the interactive plot
plotly_plot
# Create synthetic data
set.seed(123)
n <- 100
data <- data.frame(
Algae_Population = rnorm(n),
Light = rnorm(n),
CO2_Concentration = rnorm(n),
Temperature = factor(rep(c("High", "Low"), each = n/2))
)
# Initial analysis: Algae vs. Light without considering CO2
initial_plot_light <- ggplot(data, aes(x = Light, y = Algae_Population)) +
geom_point() +
labs(title = "Relationship between Algae and Light")
# Initial analysis: Algae vs. CO2 without considering Light
initial_plot_CO2 <- ggplot(data, aes(x = CO2_Concentration, y = Algae_Population)) +
geom_point() +
labs(title = "Relationship between Algae and CO2")
# Subgroup analysis: Algae vs. Light, considering Temperature
subgroup_plot_light <- ggplot(data, aes(x = Light, y = Algae_Population)) +
geom_point() +
labs(title = "Relationship between Algae and Light (by Temperature)") +
facet_wrap(~Temperature)
# Subgroup analysis: Algae vs. CO2, considering Temperature
subgroup_plot_CO2 <- ggplot(data, aes(x = CO2_Concentration, y = Algae_Population)) +
geom_point() +
labs(title = "Relationship between Algae and CO2 (by Temperature)") +
facet_wrap(~Temperature)
# Display plots
print(initial_plot_light)
print(initial_plot_CO2)
print(subgroup_plot_light)
print(subgroup_plot_CO2)
light <- alldata[, c("Light", "Population")]
print(light)
ggplot(light, aes(x = Population, y = Light)) +
geom_point(color = "blue", shape = 19) +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(x = "Position Won", y = "Average Points Per Game", title = "Scatter Plot of The Relationship Between Average Points Per Game & Position")
correlation <- cor(ppg_position$PPG, ppg_position$POSITION)
light <- alldata[, c("Light", "Population")]
print(light)
ggplot(light, aes(x = Population, y = Light)) +
geom_point(color = "blue", shape = 19) +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(x = "Position Won", y = "Average Points Per Game", title = "Scatter Plot of The Relationship Between Average Points Per Game & Position")
correlation <- cor(light$Light, light$Population)
cat("Correlation coefficient (r-value):", correlation, "\n")
light <- alldata[, c("Light", "Population")]
print(light)
ggplot(light, aes(x = Population, y = Light)) +
geom_point(color = "blue", shape = 19) +
labs(x = "Position Won", y = "Average Points Per Game", title = "Scatter Plot of The Relationship Between Average Points Per Game & Position")
correlation <- cor(light$Light, light$Population)
cat("Correlation coefficient (r-value):", correlation, "\n")
light <- alldata[, c("Light", "Population")]
ggplot(light, aes(x = Population, y = Light)) +
geom_point(color = "blue", shape = 19) +
labs(x = "Position Won", y = "Average Points Per Game", title = "Scatter Plot of The Relationship Between Average Points Per Game & Position")
correlation <- cor(light$Light, light$Population)
cat("Correlation coefficient (r-value):", correlation, "\n")
nitrate <- alldata[, c("Nitrate", "Population")]
ggplot(light, aes(x = Population, y = Nitrate)) +
geom_point(color = "blue", shape = 19) +
labs(x = "Position Won", y = "Average Points Per Game", title = "Scatter Plot of The Relationship Between Average Points Per Game & Position")
nitrate <- alldata[, c("Nitrate", "Population")]
ggplot(nitrate, aes(x = Population, y = Nitrate)) +
geom_point(color = "blue", shape = 19) +
labs(x = "Position Won", y = "Average Points Per Game", title = "Scatter Plot of The Relationship Between Average Points Per Game & Position")
correlation <- cor(nitrate$Nitrate, nitrate$Population)
cat("Correlation coefficient (r-value):", correlation, "\n")
iron <- alldata[, c("Iron", "Population")]
ggplot(iron, aes(x = Population, y = Iron)) +
geom_point(color = "blue", shape = 19) +
labs(x = "Position Won", y = "Average Points Per Game", title = "Scatter Plot of The Relationship Between Average Points Per Game & Position")
correlation <- cor(iron$Iron, iron$Population)
cat("Correlation coefficient (r-value):", correlation, "\n")
phosphate <- alldata[, c("Phosphate", "Population")]
ggplot(phosphate, aes(x = Population, y = Phosphate)) +
geom_point(color = "blue", shape = 19) +
labs(x = "Position Won", y = "Average Points Per Game", title = "Scatter Plot of The Relationship Between Average Points Per Game & Position")
correlation <- cor(phosphate$Phosphate, phosphate$Population)
cat("Correlation coefficient (r-value):", correlation, "\n")
iron <- alldata[, c("Iron", "Population")]
ggplot(iron, aes(x = Population, y = Iron)) +
geom_point(color = "blue", shape = 19) +
labs(x = "Position Won", y = "Average Points Per Game", title = "Scatter Plot of The Relationship Between Average Points Per Game & Position")
correlation <- cor(iron$Iron, iron$Population)
cat("Correlation coefficient (r-value):", correlation, "\n")
temp <- alldata[, c("Temperature", "Population")]
ggplot(temp, aes(x = Population, y = Temperature)) +
geom_point(color = "blue", shape = 19) +
labs(x = "Position Won", y = "Average Points Per Game", title = "Scatter Plot of The Relationship Between Average Points Per Game & Position")
correlation <- cor(temp$Temperature, temp$Population)
cat("Correlation coefficient (r-value):", correlation, "\n")
phosphate <- alldata[, c("Phosphate", "Population")]
ggplot(phosphate, aes(x = Population, y = Phosphate)) +
geom_point(color = "blue", shape = 19) +
labs(x = "Position Won", y = "Average Points Per Game", title = "Scatter Plot of The Relationship Between Average Points Per Game & Position")
correlation <- cor(phosphate$Phosphate, phosphate$Population)
cat("Correlation coefficient (r-value):", correlation, "\n")
p <- alldata[, c("pH", "Population")]
ggplot(p, aes(x = Population, y = pH)) +
geom_point(color = "blue", shape = 19) +
labs(x = "Position Won", y = "Average Points Per Game", title = "Scatter Plot of The Relationship Between Average Points Per Game & Position")
correlation <- cor(p$pH, p$Population)
cat("Correlation coefficient (r-value):", correlation, "\n")
co <- alldata[, c("CO2", "Population")]
ggplot(co, aes(x = Population, y = CO2)) +
geom_point(color = "blue", shape = 19) +
labs(x = "Position Won", y = "Average Points Per Game", title = "Scatter Plot of The Relationship Between Average Points Per Game & Position")
correlation <- cor(co$CO2, co$Population)
cat("Correlation coefficient (r-value):", correlation, "\n")
hist(alldata$Light,
main = "Histogram of My Numeric Variable",
xlab = "Light Values",
ylab = "Frequency",
col = "blue",
border = "black",
breaks = 10)  # Adjust the number of bins as needed
hist(alldata$Light,
main = "Histogram of My Numeric Variable",
xlab = "Light Values",
ylab = "Frequency",
col = "blue",
border = "black",
breaks = 10)  # Adjust the number of bins as needed
# Add a vertical line at x = 0
abline(v = 0, col = "red", lwd = 2)
hist(alldata$Light,
main = "Histogram of My Numeric Variable",
xlab = "Light Values",
ylab = "Frequency",
col = "blue",
border = "black",
breaks = 10)  # Adjust the number of bins as needed
# Calculate the density estimate
density_estimate <- density(my_data$Value)
hist(alldata$Light,
main = "Histogram of My Numeric Variable",
xlab = "Light Values",
ylab = "Frequency",
col = "blue",
border = "black",
breaks = 10)  # Adjust the number of bins as needed
# Calculate the density estimate
density_estimate <- density(alldata$Light)
# Add the density curve as a red line
lines(density_estimate, col = "red", lwd = 2)
hist(alldata$Light,
main = "Histogram of My Numeric Variable",
xlab = "Light Values",
ylab = "Frequency",
col = "blue",
border = "black",
breaks = 10)  # Adjust the number of bins as needed
# Calculate the density estimate
density_estimate <- density(alldata$Light)
# Add the density curve as a red line
lines(density_estimate, col = "red", lwd = 10)
hist(alldata$Light,
main = "Histogram of My Numeric Variable",
xlab = "Light Values",
ylab = "Frequency",
col = "blue",
border = "black",
breaks = 10)  # Adjust the number of bins as needed
# Calculate the density estimate
density_estimate <- density(alldata$Light)
# Add the density curve as a red line
lines(density_estimate, col = "red", lwd = 2)
# Calculate the density estimate
density_estimate <- density(alldata$Light)
# Create a blank plot for the density curve
plot(density_estimate,
main = "Histogram with Density Curve",
xlab = "Light Values",
ylab = "Density",
type = "n",  # Create an empty plot
col = "red")  # Set the line color for the density curve
# Add the density curve as a red line
lines(density_estimate, col = "red", lwd = 2)
# Create the histogram bars on top of the density curve
hist(alldata$Light,
col = "blue",
border = "black",
breaks = 10,  # Adjust the number of bins as needed
add = TRUE)  # Add the bars to the existing plot
# Calculate the density estimate
density_estimate <- density(alldata$Light)
# Create the histogram bars on top of the density curve
hist(alldata$Light,
col = "blue",
border = "black",
breaks = 10,  # Adjust the number of bins as needed
add = TRUE)  # Add the bars to the existing plot
# Calculate the density estimate
density_estimate <- density(alldata$Light)
# Create a blank plot for the density curve
plot(density_estimate,
main = "Histogram with Density Curve",
xlab = "Light Values",
ylab = "Density",
type = "n",  # Create an empty plot
col = "red")  # Set the line color for the density curve
# Add the density curve as a red line
lines(density_estimate, col = "red", lwd = 2)
# Create the histogram bars on top of the density curve
hist(alldata$Light,
col = "blue",
border = "black",
breaks = 10,  # Adjust the number of bins as needed
add = TRUE)  # Add the bars to the existing plot
hist(alldata$Light,
main = "Histogram of My Numeric Variable",
xlab = "Light Values",
ylab = "Frequency",
col = "blue",
border = "black",
breaks = 10)  # Adjust the number of bins as needed
# Calculate the density estimate
density_estimate <- density(alldata$Light)
# Add the density curve as a red line
lines(density_estimate, col = "red", lwd = 2)
# Create a histogram
hist(alldata$Light,
main = "Histogram with Normal Distribution Curve",
xlab = "X-axis Label",
ylab = "Frequency",
col = "blue",
border = "black",
breaks = 10)  # Adjust the number of bins as needed
# Calculate mean and standard deviation
mean_value <- mean(alldata$Light)
std_dev <- sd(alldata$Light)
# Create the normal distribution curve
x <- seq(min(alldata$Light), max(alldata$Light), length = 1000)
y <- dnorm(x, mean = mean_value, sd = std_dev)
# Overlay the normal distribution curve
lines(x, y, col = "red", lwd = 2)
# Create a histogram
hist(alldata$Light,
main = "Histogram with Normal Distribution Curve",
xlab = "X-axis Label",
ylab = "Frequency",
col = "blue",
border = "black",
breaks = 20)  # Adjust the number of bins as needed
# Calculate mean and standard deviation
mean_value <- mean(alldata$Light)
std_dev <- sd(alldata$Light)
# Create the normal distribution curve
x <- seq(min(alldata$Light), max(alldata$Light), length = 1000)
y <- dnorm(x, mean = mean_value, sd = std_dev)
# Overlay the normal distribution curve
lines(x, y, col = "red", lwd = 2)
# Create a histogram
hist(alldata$Light,
main = "Histogram with Normal Distribution Curve",
xlab = "X-axis Label",
ylab = "Frequency",
col = "blue",
border = "black",
breaks = 20)  # Adjust the number of bins as needed
# Calculate mean and standard deviation
mean_value <- mean(alldata$Light)
std_dev <- sd(alldata$Light)
# Create the normal distribution curve
x <- seq(min(alldata$Light), max(alldata$Light), length = 100)
y <- dnorm(x, mean = mean_value, sd = std_dev)
# Overlay the normal distribution curve
lines(x, y, col = "red", lwd = 2)
# Create a histogram
hist(alldata$pH,
main = "Histogram with Normal Distribution Curve",
xlab = "X-axis Label",
ylab = "Frequency",
col = "blue",
border = "black",
breaks = 20)  # Adjust the number of bins as needed
# Calculate mean and standard deviation
mean_value <- mean(alldata$pH)
std_dev <- sd(alldata$pH)
# Create the normal distribution curve
x <- seq(min(alldata$pH), max(alldata$pH), length = 100)
y <- dnorm(x, mean = mean_value, sd = std_dev)
# Overlay the normal distribution curve
lines(x, y, col = "red", lwd = 2)
# Create a histogram
hist(alldata$pH,
main = "Histogram with Normal Distribution Curve",
xlab = "X-axis Label",
ylab = "Frequency",
col = "blue",
border = "black",
breaks = 10)  # Adjust the number of bins as needed
# Calculate mean and standard deviation
mean_value <- mean(alldata$pH)
std_dev <- sd(alldata$pH)
# Create the normal distribution curve
x <- seq(min(alldata$pH), max(alldata$pH), length = 100)
y <- dnorm(x, mean = mean_value, sd = std_dev)
# Overlay the normal distribution curve
lines(x, y, col = "red", lwd = 2)
# Create a histogram
hist(alldata$pH,
main = "Histogram with Normal Distribution Curve",
xlab = "X-axis Label",
ylab = "Frequency",
col = "blue",
border = "black",
breaks = 15)  # Adjust the number of bins as needed
# Calculate mean and standard deviation
mean_value <- mean(alldata$pH)
std_dev <- sd(alldata$pH)
# Create the normal distribution curve
x <- seq(min(alldata$pH), max(alldata$pH), length = 100)
y <- dnorm(x, mean = mean_value, sd = std_dev)
# Overlay the normal distribution curve
lines(x, y, col = "red", lwd = 2)
# Create a histogram
# Create a histogram
hist(alldata$pH,
main = "Histogram with Normal Distribution Curve",
xlab = "pH Values",
ylab = "Frequency",
col = "blue",
border = "black",
breaks = 15)  # Adjust the number of bins as needed
# Calculate mean and standard deviation
mean_value <- mean(alldata$pH)
std_dev <- sd(alldata$pH)
# Create the normal distribution curve
x <- seq(mean_value - 3 * std_dev, mean_value + 3 * std_dev, length = 1000)  # Adjust the range and increase points
y <- dnorm(x, mean = mean_value, sd = std_dev)
# Overlay the normal distribution curve
lines(x, y, col = "red", lwd = 2)
# Create a histogram
# Create a histogram
hist(alldata$pH,
main = "Histogram with Normal Distribution Curve",
xlab = "pH Values",
ylab = "Frequency",
col = "blue",
border = "black",
breaks = 15)  # Adjust the number of bins as needed
# Calculate mean and standard deviation
mean_value <- mean(alldata$pH)
std_dev <- sd(alldata$pH)
# Create the normal distribution curve with an extended x-axis range
x <- seq(min(alldata$pH) - 3 * std_dev, max(alldata$pH) + 3 * std_dev, length = 1000)
y <- dnorm(x, mean = mean_value, sd = std_dev)
# Overlay the normal distribution curve
lines(x, y, col = "red", lwd = 2)
# Create a box plot
boxplot(alldata$pH,
main = "Box Plot",
xlab = "X-axis Label",
ylab = "Y-axis Label",
col = "blue",
border = "black")
# Load the required libraries
library(ggplot2)
library(plotly)
# Create your ggplot2 plot
ggplot_plot <- ggplot(alldata, aes(x = Nitrate, y = Phosphate, z = Iron, size = Population)) +
geom_point() +
labs(
title = "4D Scatter Plot of Algae Growth",
x = "Nitrate",
y = "Phosphate",
z = "Iron",
size = "Population"
) +
theme_minimal()
# Convert ggplot2 plot to plotly
plotly_plot <- ggplotly(ggplot_plot)
# View the interactive plot
plotly_plot
# Create synthetic data
set.seed(123)
n <- 100
data <- data.frame(
Algae_Population = rnorm(n),
Light = rnorm(n),
CO2_Concentration = rnorm(n),
Temperature = factor(rep(c("High", "Low"), each = n/2))
)
# Initial analysis: Algae vs. Light without considering CO2
initial_plot_light <- ggplot(data, aes(x = Light, y = Algae_Population)) +
geom_point() +
labs(title = "Relationship between Algae and Light")
# Initial analysis: Algae vs. CO2 without considering Light
initial_plot_CO2 <- ggplot(data, aes(x = CO2_Concentration, y = Algae_Population)) +
geom_point() +
labs(title = "Relationship between Algae and CO2")
# Subgroup analysis: Algae vs. Light, considering Temperature
subgroup_plot_light <- ggplot(data, aes(x = Light, y = Algae_Population)) +
geom_point() +
labs(title = "Relationship between Algae and Light (by Temperature)") +
facet_wrap(~Temperature)
# Subgroup analysis: Algae vs. CO2, considering Temperature
subgroup_plot_CO2 <- ggplot(data, aes(x = CO2_Concentration, y = Algae_Population)) +
geom_point() +
labs(title = "Relationship between Algae and CO2 (by Temperature)") +
facet_wrap(~Temperature)
# Display plots
print(initial_plot_light)
print(initial_plot_CO2)
print(subgroup_plot_light)
print(subgroup_plot_CO2)
# Initial analysis: Algae vs. Light without considering CO2
initial_plot_light <- ggplot(alldata, aes(x = Light, y = Population)) +
geom_point() +
labs(title = "Relationship between Algae and Light")
# Initial analysis: Algae vs. CO2 without considering Light
initial_plot_CO2 <- ggplot(alldata, aes(x = CO2, y = Population)) +
geom_point() +
labs(title = "Relationship between Algae and CO2")
# Subgroup analysis: Algae vs. Light, considering Temperature
subgroup_plot_light <- ggplot(alldata, aes(x = Light, y = Population)) +
geom_point() +
labs(title = "Relationship between Algae and Light (by Temperature)") +
facet_wrap(~Temperature)
# Subgroup analysis: Algae vs. CO2, considering Temperature
subgroup_plot_CO2 <- ggplot(alldata, aes(x = CO2, y = Population)) +
geom_point() +
labs(title = "Relationship between Algae and CO2 (by Temperature)") +
facet_wrap(~Temperature)
# Display plots
print(initial_plot_light)
print(initial_plot_CO2)
print(subgroup_plot_light)
print(subgroup_plot_CO2)
