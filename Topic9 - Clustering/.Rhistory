xpd = TRUE, inset = c(0.005, 0.001))
ssd <- function(data, centers) {
sum(kmeans(data, centers)$withinss)
}
cross_val_ssd <- function(data, k, folds = 5) {
set.seed(123)
indices <- createFolds(seq_len(nrow(data)), k = folds, list = TRUE)
avg_ssd <- sapply(indices, function(fold_indices) {
train_data <- data[-unlist(fold_indices), ]
test_data <- data[unlist(fold_indices), ]
ssd(test_data[, c("Sleep.Duration", "Stress.Level", "Heart.Rate")], k)
}) %>%
unlist() %>%
mean()
return(avg_ssd)
}
k_values <- 1:13
cv_ssd_values <- sapply(k_values, function(k) cross_val_ssd(features, k))
optimal_k_cv <- k_values[which.min(cv_ssd_values)]
kmeans_result <- kmeans(features, centers = optimal_k_cv)
cat("Optimal number of clusters (k):", optimal_k_cv, "\n")
silhouette_score <- silhouette(kmeans_result$cluster, dist(features))
cat("Silhouette Score:", mean(silhouette_score[, "sil_width"]), "\n")
db_index <- cluster.stats(features, kmeans_result$cluster)$db
ssd <- function(data, centers) {
sum(kmeans(data, centers)$withinss)
}
cross_val_ssd <- function(data, k, folds = 5) {
set.seed(123)
indices <- createFolds(seq_len(nrow(data)), k = folds, list = TRUE)
avg_ssd <- sapply(indices, function(fold_indices) {
train_data <- data[-unlist(fold_indices), ]
test_data <- data[unlist(fold_indices), ]
ssd(test_data[, c("Sleep.Duration", "Stress.Level", "Heart.Rate")], k)
}) %>%
unlist() %>%
mean()
return(avg_ssd)
}
k_values <- 1:13
cv_ssd_values <- sapply(k_values, function(k) cross_val_ssd(features, k))
optimal_k_cv <- k_values[which.min(cv_ssd_values)]
kmeans_result <- kmeans(features, centers = optimal_k_cv)
cat("Optimal number of clusters (k):", optimal_k_cv, "\n")
silhouette_score <- silhouette(kmeans_result$cluster, dist(features))
cat("Silhouette Score:", mean(silhouette_score[, "sil_width"]), "\n")
plot(features[, c("Sleep.Duration", "Stress.Level", "Heart.Rate")],
col = kmeans_result$cluster,
pch = 20,
main = paste("K-Means Clustering (k =", optimal_k_cv, ")"))
legend("topright", legend = unique(kmeans_result$cluster),
col = 1:optimal_k_cv, pch = 20, title = "Clusters",
xpd = TRUE, inset = c(0.005, 0.001))
ssd <- function(data, centers) {
sum(kmeans(data, centers)$withinss)
}
cross_val_ssd <- function(data, k, folds = 5) {
set.seed(123)
indices <- createFolds(seq_len(nrow(data)), k = folds, list = TRUE)
avg_ssd <- sapply(indices, function(fold_indices) {
train_data <- data[-unlist(fold_indices), ]
test_data <- data[unlist(fold_indices), ]
ssd(test_data[, c("Sleep.Duration", "Stress.Level", "Heart.Rate")], k)
}) %>%
unlist() %>%
mean()
return(avg_ssd)
}
k_values <- 1:13
cv_ssd_values <- sapply(k_values, function(k) cross_val_ssd(features, k))
optimal_k_cv <- k_values[which.min(cv_ssd_values)]
kmeans_result <- kmeans(features, centers = optimal_k_cv)
cat("Optimal number of clusters (k):", optimal_k_cv, "\n")
silhouette_score <- silhouette(kmeans_result$cluster, dist(features))
cat("Silhouette Score:", mean(silhouette_score[, "sil_width"]), "\n")
purity <- calculate_purity(true_labels, cluster_labels)
ssd <- function(data, centers) {
sum(kmeans(data, centers)$withinss)
}
cross_val_ssd <- function(data, k, folds = 5) {
set.seed(123)
indices <- createFolds(seq_len(nrow(data)), k = folds, list = TRUE)
avg_ssd <- sapply(indices, function(fold_indices) {
train_data <- data[-unlist(fold_indices), ]
test_data <- data[unlist(fold_indices), ]
ssd(test_data[, c("Sleep.Duration", "Stress.Level", "Heart.Rate")], k)
}) %>%
unlist() %>%
mean()
return(avg_ssd)
}
k_values <- 1:13
cv_ssd_values <- sapply(k_values, function(k) cross_val_ssd(features, k))
optimal_k_cv <- k_values[which.min(cv_ssd_values)]
kmeans_result <- kmeans(features, centers = optimal_k_cv)
cat("Optimal number of clusters (k):", optimal_k_cv, "\n")
silhouette_score <- silhouette(kmeans_result$cluster, dist(features))
cat("Silhouette Score:", mean(silhouette_score[, "sil_width"]), "\n")
calculate_purity <- function(true_labels, cluster_labels) {
contingency_table <- table(true_labels, cluster_labels)
sum(apply(contingency_table, 2, max)) / length(true_labels)
}
purity <- calculate_purity(true_labels, cluster_labels)
ssd <- function(data, centers) {
sum(kmeans(data, centers)$withinss)
}
cross_val_ssd <- function(data, k, folds = 5) {
set.seed(123)
indices <- createFolds(seq_len(nrow(data)), k = folds, list = TRUE)
avg_ssd <- sapply(indices, function(fold_indices) {
train_data <- data[-unlist(fold_indices), ]
test_data <- data[unlist(fold_indices), ]
ssd(test_data[, c("Sleep.Duration", "Stress.Level", "Heart.Rate")], k)
}) %>%
unlist() %>%
mean()
return(avg_ssd)
}
k_values <- 1:13
cv_ssd_values <- sapply(k_values, function(k) cross_val_ssd(features, k))
optimal_k_cv <- k_values[which.min(cv_ssd_values)]
kmeans_result <- kmeans(features, centers = optimal_k_cv)
cat("Optimal number of clusters (k):", optimal_k_cv, "\n")
silhouette_score <- silhouette(kmeans_result$cluster, dist(features))
cat("Silhouette Score:", mean(silhouette_score[, "sil_width"]), "\n")
calculate_purity <- function(true_labels, cluster_labels) {
contingency_table <- table(true_labels, cluster_labels)
sum(apply(contingency_table, 2, max)) / length(true_labels)
}
plot(features[, c("Sleep.Duration", "Stress.Level", "Heart.Rate")],
col = kmeans_result$cluster,
pch = 20,
main = paste("K-Means Clustering (k =", optimal_k_cv, ")"))
legend("topright", legend = unique(kmeans_result$cluster),
col = 1:optimal_k_cv, pch = 20, title = "Clusters",
xpd = TRUE, inset = c(0.005, 0.001))
ssd <- function(data, centers) {
sum(kmeans(data, centers)$withinss)
}
cross_val_ssd <- function(data, k, folds = 5) {
set.seed(123)
indices <- createFolds(seq_len(nrow(data)), k = folds, list = TRUE)
avg_ssd <- sapply(indices, function(fold_indices) {
train_data <- data[-unlist(fold_indices), ]
test_data <- data[unlist(fold_indices), ]
ssd(test_data[, c("Sleep.Duration", "Stress.Level", "Heart.Rate")], k)
}) %>%
unlist() %>%
mean()
return(avg_ssd)
}
k_values <- 1:13
cv_ssd_values <- sapply(k_values, function(k) cross_val_ssd(features, k))
optimal_k_cv <- k_values[which.min(cv_ssd_values)]
kmeans_result <- kmeans(features, centers = optimal_k_cv)
cat("Optimal number of clusters (k):", optimal_k_cv, "\n")
silhouette_score <- silhouette(kmeans_result$cluster, dist(features))
cat("Silhouette Score:", mean(silhouette_score[, "sil_width"]), "\n")
plot(features[, c("Sleep.Duration", "Stress.Level", "Heart.Rate")],
col = kmeans_result$cluster,
pch = 20,
main = paste("K-Means Clustering (k =", optimal_k_cv, ")"))
legend("topright", legend = unique(kmeans_result$cluster),
col = 1:optimal_k_cv, pch = 20, title = "Clusters",
xpd = TRUE, inset = c(0.005, 0.001))
features <- data[, c("Sleep.Duration", "Stress.Level", "Heart.Rate")]
gmm_model <- Mclust(features)
cluster_assignments <- predict(gmm_model)
silhouette_score <- silhouette(cluster_assignments, dist(features))
features <- data[, c("Sleep.Duration", "Stress.Level", "Heart.Rate")]
gmm_model <- Mclust(features)
cluster_assignments <- predict(gmm_model)
silhouette_score <- silhouette(cluster_assignments, dist(features))
features <- data[, c("Sleep.Duration", "Stress.Level", "Heart.Rate")]
gmm_model <- Mclust(features)
cluster_assignments <- predict(gmm_model)
# Convert factor to numeric
cluster_assignments_numeric <- as.numeric(as.character(cluster_assignments))
silhouette_score <- silhouette(cluster_assignments_numeric, dist(features))
features <- data[, c("Sleep.Duration", "Stress.Level", "Heart.Rate")]
gmm_model <- Mclust(features)
cluster_assignments <- predict(gmm_model)
plot(gmm_model, what = "classification")
points(features[, 1], features[, 2], col = cluster_assignments, pch = 20)
text(features[, 1], features[, 2], labels = cluster_assignments, pos = 3)
features <- data[, c("Sleep.Duration", "Stress.Level", "Heart.Rate")]
gmm_model <- Mclust(features)
cluster_assignments <- predict(gmm_model)
cat("BIC:", gmm_model$BIC, "\n")
plot(gmm_model, what = "classification")
points(features[, 1], features[, 2], col = cluster_assignments, pch = 20)
text(features[, 1], features[, 2], labels = cluster_assignments, pos = 3)
features <- data[, c("Sleep.Duration", "Stress.Level", "Heart.Rate")]
gmm_model <- Mclust(features)
cluster_assignments <- predict(gmm_model)
cat("BIC:", gmm_model$BIC, "\n")
plot(gmm_model, what = "classification")
points(features[, 1], features[, 2], col = cluster_assignments, pch = 20)
text(features[, 1], features[, 2], labels = cluster_assignments, pos = 3)
legend("topright", legend = levels(cluster_assignments),
col = 1:length(levels(cluster_assignments)), pch = 20, title = "Clusters",
xpd = TRUE, inset = c(0.005, 0.001))
features <- data[, c("Sleep.Duration", "Stress.Level", "Heart.Rate")]
gmm_model <- Mclust(features)
cluster_assignments <- predict(gmm_model)
cat("BIC:", gmm_model$BIC, "\n")
gmm_silhouette <- silhouette(cluster_assignments, dist(features))
features <- data[, c("Sleep.Duration", "Stress.Level", "Heart.Rate")]
# Convert features to numeric if needed
features <- as.matrix(features)
gmm_model <- Mclust(features)
cluster_assignments <- predict(gmm_model)
cat("BIC:", gmm_model$BIC, "\n")
# Use Euclidean distance for silhouette calculation
gmm_silhouette <- silhouette(cluster_assignments, dist(features, method = "euclidean"))
features <- data[, c("Sleep.Duration", "Stress.Level", "Heart.Rate")]
gmm_model <- Mclust(features)
cluster_assignments <- predict(gmm_model)
cat("BIC:", gmm_model$BIC, "\n")
# Convert factor to numeric
cluster_assignments_numeric <- as.numeric(as.character(cluster_assignments))
# Create a numeric distance matrix
distance_matrix <- dist(features)
# Calculate silhouette scores
gmm_silhouette <- silhouette(cluster_assignments_numeric, distance_matrix)
features <- data[, c("Sleep.Duration", "Stress.Level", "Heart.Rate")]
gmm_model <- Mclust(features)
cluster_assignments <- predict(gmm_model)
cat("BIC:", gmm_model$BIC, "\n")
gmm_silhouette <- silhouette(cluster_assignments, dist(features))
features <- data[, c("Sleep.Duration", "Stress.Level", "Heart.Rate")]
gmm_model <- Mclust(features)
cluster_assignments <- predict(gmm_model)
cat("BIC:", gmm_model$BIC, "\n")
plot(gmm_model, what = "classification")
points(features[, 1], features[, 2], col = cluster_assignments, pch = 20)
text(features[, 1], features[, 2], labels = cluster_assignments, pos = 3)
features <- data[, c("Sleep.Duration", "Stress.Level", "Heart.Rate")]
ssd <- function(data, centers) {
sum(kmeans(data, centers)$withinss)
}
# Elbow method to find optimal k
k_values <- 1:13
ssd_values <- sapply(k_values, function(k) ssd(features, k))
elbow <- data.frame(k = k_values, SSD = ssd_values)
elbow$SSD_change <- c(0, diff(elbow$SSD))
optimal_k <- elbow$k[which.max(elbow$SSD_change)]
# Calculate silhouette scores for optimal_k
kmeans_result <- kmeans(features, centers = optimal_k)
silhouette_scores <- silhouette(kmeans_result$cluster, dist(features))
mean_silhouette <- mean(silhouette_scores[, "sil_width"])
# Plotting
ggplot(elbow, aes(x = k, y = SSD)) +
geom_line() +
geom_point() +
labs(title = "Elbow Plot", x = "Number of Clusters (k)", y = "Sum of Squared Distances") +
geom_vline(xintercept = optimal_k, linetype = "dashed", color = "red") +
annotate("text", x = optimal_k, y = max(elbow$SSD), label = paste("Optimal k =", optimal_k), vjust = -0.5)
clusplot(features, kmeans_result$cluster, color = TRUE, shade = TRUE, labels = 2, main = "K-means Clustering For Optimal K")
cat("Silhouette Score for Optimal k:", mean_silhouette, "\n")
library(cluster)
library(ggplot2)
# Assuming 'features' is your data matrix
features <- data[, c("Sleep.Duration", "Stress.Level", "Heart.Rate")]
# Function to calculate silhouette score for a given k
calculate_silhouette <- function(data, k) {
kmeans_result <- kmeans(data, centers = k)
cluster_assignments <- kmeans_result$cluster
silhouette_scores <- silhouette(cluster_assignments, dist(data))
mean_silhouette <- mean(silhouette_scores[, "sil_width"])
return(mean_silhouette)
}
# Range of k values to consider
k_values <- 2:10  # You can adjust this range based on your data and requirements
# Calculate silhouette scores for each k
silhouette_scores <- sapply(k_values, function(k) calculate_silhouette(features, k))
# Find the optimal k that maximizes the silhouette score
optimal_k <- k_values[which.max(silhouette_scores)]
# Plot silhouette scores
ggplot(data.frame(k = k_values, silhouette = silhouette_scores), aes(x = k, y = silhouette)) +
geom_line() +
geom_point() +
labs(title = "Silhouette Method for Optimal k", x = "Number of Clusters (k)", y = "Mean Silhouette Score") +
geom_vline(xintercept = optimal_k, linetype = "dashed", color = "red") +
annotate("text", x = optimal_k, y = max(silhouette_scores), label = paste("Optimal k =", optimal_k), vjust = -0.5)
# Perform k-means clustering with the optimal k
optimal_kmeans_result <- kmeans(features, centers = optimal_k)
# Visualize the clustering results
clusplot(features, optimal_kmeans_result$cluster, color = TRUE, shade = TRUE, labels = 2, main = "K-means Clustering (Optimal k)")
features <- data[, c("Sleep.Duration", "Stress.Level", "Heart.Rate")]
# Function to calculate silhouette score for a given k
calculate_silhouette <- function(data, k) {
kmeans_result <- kmeans(data, centers = k)
cluster_assignments <- kmeans_result$cluster
silhouette_scores <- silhouette(cluster_assignments, dist(data))
mean_silhouette <- mean(silhouette_scores[, "sil_width"])
return(mean_silhouette)
}
k_values <- 1:10  # You can adjust this range based on your data and requirements
# Calculate silhouette scores for each k
silhouette_scores <- sapply(k_values, function(k) calculate_silhouette(features, k))
features <- data[, c("Sleep.Duration", "Stress.Level", "Heart.Rate")]
# Function to calculate silhouette score for a given k
calculate_silhouette <- function(data, k) {
kmeans_result <- kmeans(data, centers = k)
cluster_assignments <- kmeans_result$cluster
silhouette_scores <- silhouette(cluster_assignments, dist(data))
mean_silhouette <- mean(silhouette_scores[, "sil_width"])
return(mean_silhouette)
}
k_values <- 2:10  # You can adjust this range based on your data and requirements
# Calculate silhouette scores for each k
silhouette_scores <- sapply(k_values, function(k) calculate_silhouette(features, k))
# Find the optimal k that maximizes the silhouette score
optimal_k <- k_values[which.max(silhouette_scores)]
# Plot silhouette scores
ggplot(data.frame(k = k_values, silhouette = silhouette_scores), aes(x = k, y = silhouette)) +
geom_line() +
geom_point() +
labs(title = "Silhouette Method for Optimal k", x = "Number of Clusters (k)", y = "Mean Silhouette Score") +
geom_vline(xintercept = optimal_k, linetype = "dashed", color = "red") +
annotate("text", x = optimal_k, y = max(silhouette_scores), label = paste("Optimal k =", optimal_k), vjust = -0.5)
# Perform k-means clustering with the optimal k
optimal_kmeans_result <- kmeans(features, centers = optimal_k)
# Visualize the clustering results
clusplot(features, optimal_kmeans_result$cluster, color = TRUE, shade = TRUE, labels = 2, main = "K-means Clustering (Optimal k)")
features <- data[, c("Sleep.Duration", "Stress.Level", "Heart.Rate")]
# Function to calculate silhouette score for a given k
calculate_silhouette <- function(data, k) {
kmeans_result <- kmeans(data, centers = k)
cluster_assignments <- kmeans_result$cluster
silhouette_scores <- silhouette(cluster_assignments, dist(data))
mean_silhouette <- mean(silhouette_scores[, "sil_width"])
return(mean_silhouette)
}
k_values <- 2:10
silhouette_scores <- sapply(k_values, function(k) calculate_silhouette(features, k))
mean_sil_score <- mean(sil_scores[, "sil_width"])
cat("Mean Silhouette Score:", mean_sil_score, "\n")
optimal_k <- k_values[which.max(silhouette_scores)]
ggplot(data.frame(k = k_values, silhouette = silhouette_scores), aes(x = k, y = silhouette)) +
geom_line() +
geom_point() +
labs(title = "Silhouette Method for Optimal k", x = "Number of Clusters (k)", y = "Mean Silhouette Score") +
geom_vline(xintercept = optimal_k, linetype = "dashed", color = "red") +
annotate("text", x = optimal_k, y = max(silhouette_scores), label = paste("Optimal k =", optimal_k), vjust = -0.5)
optimal_kmeans_result <- kmeans(features, centers = optimal_k)
clusplot(features, optimal_kmeans_result$cluster, color = TRUE, shade = TRUE, labels = 2, main = "K-means Clustering (Optimal k)")
silhouette_plot <- silhouette(kmeans_result$cluster, dist(features))
plot(silhouette_plot, col = 1:optimal_k, border = NA)
abline(v = mean_sil_score, lty = 2, col = "red")
cat("Cluster Centers:\n")
print(kmeans_result$centers)
features <- data[, c("Sleep.Duration", "Stress.Level", "Heart.Rate")]
# Function to calculate silhouette score for a given k
calculate_silhouette <- function(data, k) {
kmeans_result <- kmeans(data, centers = k)
cluster_assignments <- kmeans_result$cluster
silhouette_scores <- silhouette(cluster_assignments, dist(data))
mean_silhouette <- mean(silhouette_scores[, "sil_width"])
return(mean_silhouette)
}
k_values <- 2:10
silhouette_scores <- sapply(k_values, function(k) calculate_silhouette(features, k))
cat("Mean Silhouette Score:", silhouette_scores, "\n")
optimal_k <- k_values[which.max(silhouette_scores)]
ggplot(data.frame(k = k_values, silhouette = silhouette_scores), aes(x = k, y = silhouette)) +
geom_line() +
geom_point() +
labs(title = "Silhouette Method for Optimal k", x = "Number of Clusters (k)", y = "Mean Silhouette Score") +
geom_vline(xintercept = optimal_k, linetype = "dashed", color = "red") +
annotate("text", x = optimal_k, y = max(silhouette_scores), label = paste("Optimal k =", optimal_k), vjust = -0.5)
optimal_kmeans_result <- kmeans(features, centers = optimal_k)
clusplot(features, optimal_kmeans_result$cluster, color = TRUE, shade = TRUE, labels = 2, main = "K-means Clustering (Optimal k)")
silhouette_plot <- silhouette(kmeans_result$cluster, dist(features))
plot(silhouette_plot, col = 1:optimal_k, border = NA)
abline(v = mean_sil_score, lty = 2, col = "red")
cat("Cluster Centers:\n")
print(kmeans_result$centers)
set.seed(345)
features <- data[, c("Sleep.Duration", "Stress.Level", "Heart.Rate")]
calculate_silhouette <- function(data, k) {
kmeans_result <- kmeans(data, centers = k)
cluster_assignments <- kmeans_result$cluster
silhouette_scores <- silhouette(cluster_assignments, dist(data))
mean_silhouette <- mean(silhouette_scores[, "sil_width"])
return(mean_silhouette)
}
k_values <- 2:10
silhouette_scores <- sapply(k_values, function(k) calculate_silhouette(features, k))
optimal_k <- k_values[which.max(silhouette_scores)]
ggplot(data.frame(k = k_values, silhouette = silhouette_scores), aes(x = k, y = silhouette)) +
geom_line() +
geom_point() +
labs(title = "Silhouette Method for Optimal k", x = "Number of Clusters (k)", y = "Mean Silhouette Score") +
geom_vline(xintercept = optimal_k, linetype = "dashed", color = "red") +
annotate("text", x = optimal_k, y = max(silhouette_scores), label = paste("Optimal k =", optimal_k), vjust = -0.5)
optimal_kmeans_result <- kmeans(features, centers = optimal_k)
clusplot(features, optimal_kmeans_result$cluster, color = TRUE, shade = TRUE, labels = 2, main = "K-means Clustering (Optimal k)")
set.seed(345)
features <- data[, c("Sleep.Duration", "Stress.Level", "Heart.Rate")]
calculate_silhouette <- function(data, k) {
kmeans_result <- kmeans(data, centers = k)
cluster_assignments <- kmeans_result$cluster
silhouette_scores <- silhouette(cluster_assignments, dist(data))
mean_silhouette <- mean(silhouette_scores[, "sil_width"])
return(mean_silhouette)
}
k_values <- 2:10
silhouette_scores <- sapply(k_values, function(k) calculate_silhouette(features, k))
optimal_k <- k_values[which.max(silhouette_scores)]
ggplot(data.frame(k = k_values, silhouette = silhouette_scores), aes(x = k, y = silhouette)) +
geom_line() +
geom_point() +
labs(title = "Silhouette Method for Optimal k", x = "Number of Clusters (k)", y = "Mean Silhouette Score") +
geom_vline(xintercept = optimal_k, linetype = "dashed", color = "red") +
annotate("text", x = optimal_k, y = max(silhouette_scores), label = paste("Optimal k =", optimal_k), vjust = -0.5)
optimal_kmeans_result <- kmeans(features, centers = optimal_k)
clusplot(features, optimal_kmeans_result$cluster, color = TRUE, shade = TRUE, labels = 2, main = "K-means Clustering (Optimal k)")
set.seed(345)
features <- data[, c("Sleep.Duration", "Stress.Level", "Heart.Rate")]
calculate_silhouette <- function(data, k) {
kmeans_result <- kmeans(data, centers = k)
cluster_assignments <- kmeans_result$cluster
silhouette_scores <- silhouette(cluster_assignments, dist(data))
mean_silhouette <- mean(silhouette_scores[, "sil_width"])
return(list(silhouette_scores = silhouette_scores, mean_silhouette = mean_silhouette))
}
k_values <- 2:10
# Calculate silhouette scores for each k
silhouette_results <- lapply(k_values, function(k) calculate_silhouette(features, k))
optimal_k_index <- which.max(sapply(silhouette_results, function(result) result$mean_silhouette))
optimal_k <- k_values[optimal_k_index]
optimal_silhouette_scores <- silhouette_results[[optimal_k_index]]$silhouette_scores
# Plot silhouette scores
ggplot(optimal_silhouette_scores, aes(x = cluster, y = silhouette)) +
geom_vline(xintercept = optimal_k, linetype = "dashed", color = "red") +
geom_boxplot(fill = "lightblue", color = "blue") +
labs(title = "Silhouette Plot for Optimal k", x = "Cluster", y = "Silhouette Score") +
theme_minimal()
set.seed(345)
features <- data[, c("Sleep.Duration", "Stress.Level", "Heart.Rate")]
calculate_silhouette <- function(data, k) {
kmeans_result <- kmeans(data, centers = k)
cluster_assignments <- kmeans_result$cluster
silhouette_scores <- silhouette(cluster_assignments, dist(data))
mean_silhouette <- mean(silhouette_scores[, "sil_width"])
return(mean_silhouette)
}
k_values <- 2:10
silhouette_scores <- sapply(k_values, function(k) calculate_silhouette(features, k))
optimal_k <- k_values[which.max(silhouette_scores)]
ggplot(data.frame(k = k_values, silhouette = silhouette_scores), aes(x = k, y = silhouette)) +
geom_line() +
geom_point() +
labs(title = "Silhouette Method for Optimal k", x = "Number of Clusters (k)", y = "Mean Silhouette Score") +
geom_vline(xintercept = optimal_k, linetype = "dashed", color = "red") +
annotate("text", x = optimal_k, y = max(silhouette_scores), label = paste("Optimal k =", optimal_k), vjust = -0.5)
optimal_kmeans_result <- kmeans(features, centers = optimal_k)
clusplot(features, optimal_kmeans_result$cluster, color = TRUE, shade = TRUE, labels = 2, main = "K-means Clustering (Optimal k)")
set.seed(345)
features <- data[, c("Sleep.Duration", "Stress.Level", "Heart.Rate")]
calculate_silhouette <- function(data, k) {
kmeans_result <- kmeans(data, centers = k)
cluster_assignments <- kmeans_result$cluster
silhouette_scores <- silhouette(cluster_assignments, dist(data))
mean_silhouette <- mean(silhouette_scores[, "sil_width"])
return(mean_silhouette)
}
k_values <- 2:10
silhouette_scores <- sapply(k_values, function(k) calculate_silhouette(features, k))
optimal_k <- k_values[which.max(silhouette_scores)]
mean_sil_score <- mean(silhouette_scores)
cat("Mean Silhouette Score:", mean_sil_score, "\n")
ggplot(data.frame(k = k_values, silhouette = silhouette_scores), aes(x = k, y = silhouette)) +
geom_line() +
geom_point() +
labs(title = "Silhouette Method for Optimal k", x = "Number of Clusters (k)", y = "Mean Silhouette Score") +
geom_vline(xintercept = optimal_k, linetype = "dashed", color = "red") +
annotate("text", x = optimal_k, y = max(silhouette_scores), label = paste("Optimal k =", optimal_k), vjust = -0.5)
optimal_kmeans_result <- kmeans(features, centers = optimal_k)
clusplot(features, optimal_kmeans_result$cluster, color = TRUE, shade = TRUE, labels = 2, main = "K-means Clustering (Optimal k)")
set.seed(345)
features <- data[, c("Sleep.Duration", "Stress.Level", "Heart.Rate")]
calculate_silhouette <- function(data, k) {
kmeans_result <- kmeans(data, centers = k)
cluster_assignments <- kmeans_result$cluster
silhouette_scores <- silhouette(cluster_assignments, dist(data))
mean_silhouette <- mean(silhouette_scores[, "sil_width"])
return(mean_silhouette)
}
k_values <- 2:10
silhouette_scores <- sapply(k_values, function(k) calculate_silhouette(features, k))
optimal_k <- k_values[which.max(silhouette_scores)]
mean_sil_score <- mean(silhouette_scores)
cat("Mean Silhouette Score:", mean_sil_score, "\n")
kmeans_result <- kmeans(features, centers = optimal_k)
silhouette_plot <- silhouette(kmeans_result$cluster, dist(features))
plot(silhouette_plot, col = 1:optimal_k, border = NA)
ggplot(data.frame(k = k_values, silhouette = silhouette_scores), aes(x = k, y = silhouette)) +
geom_line() +
geom_point() +
labs(title = "Silhouette Method for Optimal k", x = "Number of Clusters (k)", y = "Mean Silhouette Score") +
geom_vline(xintercept = optimal_k, linetype = "dashed", color = "red") +
annotate("text", x = optimal_k, y = max(silhouette_scores), label = paste("Optimal k =", optimal_k), vjust = -0.5)
optimal_kmeans_result <- kmeans(features, centers = optimal_k)
clusplot(features, optimal_kmeans_result$cluster, color = TRUE, shade = TRUE, labels = 2, main = "K-means Clustering (Optimal k)")
features <- data[, c("Sleep.Duration", "Stress.Level", "Heart.Rate")]
gmm_model <- Mclust(features)
cluster_assignments <- predict(gmm_model)
cat("BIC:", gmm_model$BIC, "\n")
plot(gmm_model, type = "BIC", col = "blue", main = "BIC Plot for GMM")
